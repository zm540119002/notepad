1.用PHP打印出前一天的时间格式是2006-5-10 22:21:21
	答：echo date('Y-m-d H:i:s', strtotime('-1 day'));
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.test表中有A B C三列,用SQL语句实现：当A列大于B列时选择A列否则选择B列，当B列大于C列时选择B列否则选择C列。
 答：select case when A>B then A else B end,
        case when B>C then B else C end
	From test	
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.	$a = 3;
	echo "$a",'$a',"\\\$a","${a}","$a"."$a","$a"+"$a";
	结果是： 3$a\$a3336
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4.array+array与array_merge()的区别 
	二者之间的区别是： 
	1 键名为数字时，array_merge()不会覆盖掉原来的值，但＋合并数组则会把最先出现的值作为最终结果返回，
		而把后面的数组拥有相同键名的那些值“抛弃”掉（不是覆盖） 
	2 键名为字符时，＋仍然把最先出现的值作为最终结果返回，
		而把后面的数组拥有相同键名的那些值“抛弃”掉，但array_merge()此时会覆盖掉前面相同键名的值
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------		
5.写出发贴数最多的十个人名字的SQL，利用下表：members(id,username,posts,pass,email)
	答:SELECT * FROM `members` ORDER BY posts DESC limit 0,10;
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
6.优化MYSQL数据库的方法。
	1、创建索引
		对于查询占主要的应用来说，索引显得尤为重要。很多时候性能问题很简单的就是因为我们忘了添加索引而造成的，或者说没有添加更为有效的索引导致。
		如果不加索引的话，那么查找任何哪怕只是一条特定的数据都会进行一次全表扫描，如果一张表的数据量很大而符合条件的结果又很少，那么不加索引会引起致命的性能下降。
		但是也不是什么情况都非得建索引不可，比如性别可能就只有两个值，建索引不仅没什么优势，还会影响到更新速度，这被称为过度索引。
	2、复合索引
		比如有一条语句是这样的：select * from users where area='beijing' and age=22;
		如果我们是在area和age上分别创建单个索引的话，由于mysql查询每次只能使用一个索引，所以虽然这样已经相对不做索引时全表扫描提高了很多效率，但是如果在area、age两列上创建复合索引的话将带来更高的效率。
		如果我们创建了(area, age, salary)的复合索引，那么其实相当于创建了(area,age,salary)、(area,age)、(area)三个索引，这被称为最佳左前缀特性。因此我们在创建复合索引时应该将最常用作限制条件的列放在最左边，依次递减。
	3、索引不会包含有NULL值的列
		只要列中包含有NULL值都将不会被包含在索引中，复合索引中只要有一列含有NULL值，那么这一列对于此复合索引就是无效的。所以我们在数据库设计时不要让字段的默认值为NULL。
	4、使用短索引
		对串列进行索引，如果可能应该指定一个前缀长度。例如，如果有一个CHAR(255)的 列，如果在前10 个或20 个字符内，多数值是惟一的，那么就不要对整个列进行索引。短索引不仅可以提高查询速度而且可以节省磁盘空间和I/O操作。
	5、排序的索引问题
		mysql查询只使用一个索引，因此如果where子句中已经使用了索引的话，那么order by中的列是不会使用索引的。因此数据库默认排序可以符合要求的情况下不要使用排序操作；尽量不要包含多个列的排序，如果需要最好给这些列创建复合索引。
	6、like语句操作
		一般情况下不鼓励使用like操作，如果非使用不可，如何使用也是一个问题。like “%aaa%” 不会使用索引而like “aaa%”可以使用索引。
	7、不要在列上进行运算
		select * from users where YEAR(adddate)<2007;
		将在每个行上进行运算，这将导致索引失效而进行全表扫描，因此我们可以改成
		select * from users where adddate<‘2007-01-01';
	8、不使用NOT IN和<>操作
		NOT IN和<>操作都不会使用索引将进行全表扫描。NOT IN可以NOT EXISTS代替，id<>3则可使用id>3 or id<3来代替。 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7.$tmp = 0 == "a"? 1: 2; 
	echo $tmp; 
	结果 1 int和string类型强制转换造成的，0==="a" 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8.已知一个字符串如下: $str = "1109063 milo 1"; 
	用一行代码将该字符串里面的1109063赋值给$uid, milo赋值给$user, 1赋值给$type 
	list($uid, $user, $type) = explode(" ", $str); 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
9.$num = "1234567890.11";
        echo preg_replace('/(?<=[0-9])(?=(?:[0-9]{3})+(?![0-9]))/', ',', $num);
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------		
10.ThinkPHP如何防止SQL注入
（1）查询条件尽量使用数组方式，这是更为安全的方式；
（2）如果不得已必须使用字符串查询条件，使用预处理机制；
（3）开启数据字段类型验证，可以对数值数据类型做强制转换；（3.1版本开始已经强制进行字段类型验证了）
（4）使用自动验证和自动完成机制进行针对应用的自定义过滤；
（5）使用字段类型检查、自动验证和自动完成机制等避免恶意数据的输入。
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
11.说说对SQL语句优化有哪些方法？
（1）Where子句中：where表之间的连接必须写在其他Where条件之前，那些可以过滤掉最大数量记录的条件必须写在Where子句的末尾.HAVING最后。
（2）用EXISTS替代IN、用NOT EXISTS替代NOT IN。
（3） 避免在索引列上使用计算
（4）避免在索引列上使用IS NULL和IS NOT NULL
（5）对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。
（6）应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描
（7）应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
12、谈谈对MVC的认识?        
	答案:
	核心思想是：视图和用户交互通过事件导致控制器改变 控制器改变导致模型改变 或者控制器同时改变两者 模型改变 导致视图改变 或者视图改变 潜在的从模型里面获得参数 来改变自己。他的好处是可以将界面和业务逻辑分离。
	Model（模型），是程序的主体部分，主要包含业务数据和业务逻辑。在模型层，还会涉及到用户发布的服务，在服务中会根据不同的业务需求，更新业务模型中的数据。
	View(视图），是程序呈现给用户的部分，是用户和程序交互的接口，用户会根据具体的业务需求，在View视图层输入自己特定的业务数据，并通过界面的事件交互，将对应的输入参数提交给后台控制器进行处理。
	Contorller（控制器），Contorller是用来处理用户 输入数据，已经更新业务模型的部分。控制器中接收了用户与界面交互时传递过来的数据，并根据数据业务逻辑来执行服务的调用和更新业务模型的数据和状态。
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
13、mysql优化怎么做的？
答：mysql优化主要从以下几个方面来实现：

  ①设计角度：存储引擎的选择，字段类型选择，范式

  ②功能角度：可以利用mysql自身的特性，如索引，查询缓存，碎片整理，分区、分表等

  ③sql语句的优化方面:尽量简化查询语句，能查询字段少就尽量少查询字段，优化分页语句、分组语句等。

  ④部署大负载架构体系：数据库服务器单独出来，负载大时可以采用主从复制，读写分离机制进行设计

  ⑤从硬件上升级数据库服务器。
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
14 、sql语句的优化
	答：首先我们得确定哪些sql语句需要优化，一般在一个系统中，查询语句最多，所以我们主要是针对查询语句进行优化。主要采用两种方式来确定要优化的sql语句：

   ①使用慢查询日志，设置需要优化的sql语句的执行时间，记录下超过该设置时间的语句，即为需要优化的语句。
   ②使用profiling机制，记录下每条sql语句的执行时间，找出执行较慢的语句，即为需要优化的语句。
   我们主要通过给表字段添加索引的方式进行优化，加上索引后，sql语句的执行时间显著提高了，但并不是加上索引了这条sql语句就会用到索引，所以首先看执行慢的语句后面是否有加索引，
   我们可以使用explain或者desc加在要执行的sql语句前，查看是否使用到索引。有几个地方需要注意的是：

  ①为了避免建议索引而造成索引文件过大，有时候我们会使用复合索引，这时候要遵循最左原则。

  ②like查询，前%不会用到索引

  ③如果条件中有or，则要求or的索引字段都必须有索引，否则不能用到索引。

  ④如果列类型是字符串，一定要在条件中将数据使用引号引用起来，否则不使用索引。

  ⑤优化group by 语句

  ⑥尽量避免模糊匹配，这样会导致全盘扫描
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
15、 索引有几种
	答：索引主要有：
      主键索引：数据记录里面不能有null,数据内容不能重复，在一张表里面不能有多个主键索引。
      普通索引：使用字段关键字建立的索引，主要是提高查询速度
      唯一索引：字段数据是唯一的，数据内容里面能否为null,在一张表里面，是可以添加多个唯一索引。
      全文索引：在比较老的版本中，只有myisam引擎支持全文索引，在innodb5.6后引擎也支持全文索引，在mysql中全文索引不支持中文。我们一般使用sphinx集合coreseek来实现中文的全文索引。
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
16、左前索引原则
	答：左前索引主要指的是在复合索引中，给两个或多个字段建立了复合索引后，在sql语句后的条件中，只有复合索引前面的字段在条件的前面时，该索引才起作用，比如创建了个复合索引index （a，b），
在使用where或者orderby条件时，如果只有条件b的，该索引不会生效，必须有条件a且必须要在条件b的前面该索引才会生效。
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
17. 说说对SQL语句优化有哪些方法？（选择几条）

（1）Where子句中：where表之间的连接必须写在其他Where条件之前，那些可以过滤掉最大数量记录的条件必须写在Where子句的末尾.HAVING最后。

（2）用EXISTS替代IN、用NOT EXISTS替代NOT IN。

（3） 避免在索引列上使用计算

（4）避免在索引列上使用IS NULL和IS NOT NULL

（5）对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。　　

（6）应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描

（7）应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
18. SQL语句中‘相关子查询’与‘非相关子查询’有什么区别？

答：子查询：嵌套在其他查询中的查询称之。

子查询又称内部，而包含子查询的语句称之外部查询（又称主查询）。

所有的子查询可以分为两类，即相关子查询和非相关子查询

（1）非相关子查询是独立于外部查询的子查询，子查询总共执行一次，执行完毕后将值传递给外部查询。

（2）相关子查询的执行依赖于外部查询的数据，外部查询执行一行，子查询就执行一次。
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
19. Mysql 的存储引擎,myisam和innodb的区别。
MyISAM 是非事务的存储引擎；适合用于频繁查询的应用；表锁，不会出现死锁；适合小数据，小并发
innodb是支持事务的存储引擎；合于插入和更新操作比较多的应用；设计合理的话是行锁（最大区别就在锁的级别上）；适合大数据，大并发。
MyISAM引擎是MySQL 5.1及之前版本的默认引擎，它的特点是： 
	不支持行锁，读取时对需要读到的所有表加锁，写入时则对表加排它锁 不支持事务 不支持外键 不支持崩溃后的安全恢复 
	在表有读取查询的同时，支持往表中插入新纪录 支持BLOB和TEXT的前500个字符索引，支持全文索引 支持延迟更新索引，
	极大提升写入性能 对于不会进行修改的表，支持压缩表，极大减少磁盘空间占用
InnoDB在MySQL 5.5后成为默认索引，它的特点是： 支持行锁，采用MVCC来支持高并发 支持事务 支持外键 支持崩溃后的安全恢复 不支持全文索引
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
20. HTTP协议中几个状态码的含义:503 500 401 403 404 200 301 302。。。
200 : 请求成功，请求的数据随之返回。
301 : 永久性重定向。
302 : 暂时行重定向。
401 : 当前请求需要用户验证。
403 : 服务器拒绝执行请求，即没有权限。
404 : 请求失败，请求的数据在服务器上未发现。
500 : 服务器错误。一般服务器端程序执行错误。
503 : 服务器临时维护或过载。这个状态时临时性的。
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
21、 写出一些php魔术方法。
__construct() 实例化类时自动调用。
__destruct() 类对象使用结束时自动调用。
__set() 在给未定义的属性赋值的时候调用。
__get() 调用未定义的属性时候调用。
__isset() 使用isset()或empty()函数时候会调用。
__unset() 使用unset()时候会调用。
__sleep() 使用serialize序列化时候调用。
__wakeup() 使用unserialize反序列化的时候调用。
__call() 调用一个不存在的方法的时候调用。
__callStatic()调用一个不存在的静态方法是调用。
__toString() 把对象转换成字符串的时候会调用。比如 echo。
__invoke() 当尝试把对象当方法调用时调用。
__set_state() 当使用var_export()函数时候调用。接受一个数组参数。
__clone() 当使用clone复制一个对象时候调用。
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
22、如何获取客户端的IP地址？
	答案：$_SERVER['REMOTE_ADDR']
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
23、PHP 不使用第三个变量实现交换两个变量的值？
	答案：list($b,$a)=array($a,$b);
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
24、PHP 如何写接口给人家调用？
	答案：
	public function  authenticationApi($data,$url){       
		$ch  = curl_init();       
		curl_setopt($ch, CURLOPT_URL, $url);        
		curl_setopt($ch, CURLOPT_POST, 1);        
		curl_setopt($ch, CURLOPT_HEADER, 0);        
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);        
		curl_setopt($ch, CURLOPT_POSTFIELDS, $data);    
		//输出格式可以转为数组形式的json格式        
		$tmpInfo = curl_exec($ch);        
		curl_close($ch);        
		return $tmpInfo;    
	}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
25、从表login中选出name字段包含admin的前10条结果所有信息的sql语句。
	答案：Select *from login where name like '%admin%' limit 0,10;
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
26、什么是单点登录，实现思路?
	答案:单点登录SSO（Single Sign On）说得简单点就是在一个多系统共存的环境下，用户在一处登录后，就不用在其他系统中登录，也就是用户的一次登录能得到其他所有系统的信任。
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1、有2年以上PHP开发经验，熟悉MVC/OOP，具有独立承担模块分析、设计开发能力
2、有数据库设计经验，有良好的代码编写习惯；
3、熟悉一到两种常用PHP框架（Laravel、Yii、ThinkPHP5）；
4、熟练使用HTML、JQuery、Javascript、Ajax、JSON
5、熟悉Linux操作系统，熟悉基本Linux命令；
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------