===========================================函数
--------------------数组操作
splice
--------------------
addEventListener
===========================================
===========================================数组深浅拷贝的问题
原因：js中array是引用类型，也就是arrA和arrB的原数据存储地址是一样的，arrA和arrB都是对原数据的引用，所以修改其中一个，另一个也会改变。
解决方案有以下4种：
方法一：concat()用于连接两个或多个数组。该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。
	let arrA = [1, 2, 3];
	let arrB = [].concat(arrA);
方法二：先JSON.stringify( ) 后 JSON.parse( )
	let arrA = [1, 2, 3];
	let arrB = JSON.parse(JSON.stringify(arrA));
方法三：jQuery的extend方法
	let a = [1,2,3];
	let b = $.extend(true,[],a)
方法四：Object.assign()方法 或者 [...arr]
	let a = [1,2,3];
	let b = Object.assign([],a) 
但是需要注意的是，如果是对象数组，即使是用方法一的concat、方法四的Object.assign()或者[...arr]赋值也是会互相影响的
===========================================变量类型判断
var obj = Object(); // 返回原对象
console.log(obj); //{}
console.log('------------------');
var value = {};
obj = Object(value); // 返回原对象
console.log(obj === value); //true
console.log(obj); //{}
console.log('------------------');
obj = Object({});
console.log(obj === {}); //false
console.log(obj); //{}
console.log('------------------');
var obj2 = {};
console.log(obj === obj2); //false
console.log('------------------');
利用这一点，可以写一个判断变量是否为对象的函数。
function isObject(value) {
	return value === Object(value);
}
console.log(isObject([])); // true
console.log(isObject(true)); // false
console.log(isObject(1)); // false
console.log(isObject('abc')); // false

function isArray(obj) {
    return Object.prototype.toString.call(obj) == '[object Array]';
}
function isObject(obj) {
    return Object.prototype.toString.call(obj) == '[object Object]';
}
===========================================变量作用域
var 声明的变量属于函数作用域，let 和 const 声明的变量属于块级作用域；
var 存在变量提升现象，而 let 和 const 没有此类现象；
var 变量可以重复声明，而在同一个块级作用域，let 变量不能重新声明，const 变量不能修改。

以下是一个经典的关于 var 和 let 的一个例子：
for (var i = 0; i < 10; i++) {
    setTimeout(function(){
        console.log(i);
    },100)
};
该代码运行后，会在控制台打印出10个10.若修改为：
for (let i = 0; i < 10; i++) {
    setTimeout(function(){
        console.log(i);
    },100)
};
则该代码运行后，就会在控制台打印出0-9.
原因：
var声明的，在全局范围内都有效，console.log(i)，里面的i指向的就是全局的i，所以最后输出的是10。。。
let声明的，只在本轮循环局部有效，console.log(i)，每一次for循环的i都为新变量，所以最后输出的是0-9。
===========================================数组-字符串-互转
//数组转json字符串
var arr = [1,2,3, { a : 1 } ];
JSON.stringify( arr );
//json对象转字符串
JSON.stringify(obj) === '{}';
----------------------------------
//json字符串转数组
var jsonStr = '[1,2,3,{"a":1}]';
JSON.parse( jsonStr );
===========================================遍历
for(let j = 0,len = arr.length; j < len; j++){
    console.log(arr[j]);
}
----------------------------------forEach（只能用于数组）
arr.forEach(function(item,index){
	console.log('forEach遍历:'+index+'--'+item);
});
forEach这种方法也有一个小缺陷：你不能使用break语句中断循环，也不能使用return语句返回到外层函 ,只能用于数组
----------------------------------
arr.map(function(value,index){
    console.log('map遍历:'+index+'--'+value);
});
map遍历支持使用return语句，支持return返回值，例如：
var temp=arr.map(function(val,index){
  console.log(val);  
  return val*val           
})
console.log(temp);  
----------------------------------遍历json对象
myJson = {"name":"caibaojian", "password":"1111"};
//遍历json对象的每个key/value对,p为key
for(let p in myJson){ 
	alert(p + " " + myJson[p]);
}
===========================================form 表单
在提交form表单的时候，action 不填就默认为提交到当前的页面。
有时候我们在表单进行提交前需要进行表单验证，如果验证不通过，那么就需要阻止表单提交的默认行为，下面介绍两种阻止此默认行为的方式。
1、	return false;
2、	event.preventDefault();
===========================================null与undefined判断
var exp = null; 
if (!exp && typeof(exp)!="undefined" && exp!=0) { 
	alert("is null"); 
}　
var exp = undefined;
if (typeof(exp) == "undefined"){
    alert("undefined");
}
===========================================
var a = {n:1};
var b = a;
a.x = a = {n:2}; | a = a.x = {n:2}
console.log(a.x);
console.log(a);
console.log(b); 
答案：
	undefined
	{n: 2}
	{n: 1, x: {n: 2}}
解析：
其实js对象添加属性包括两个过程，"解析"和"赋值"，上面也说了，这个“解析”呢，其实就是‘.’操作符的优先级要高于赋值，
这两个过程的执行方向刚好相反，“解析”从左到右进行，赋值则从右到左，而且“解析”的过程在赋值之前，
如var obj = {};obj.name='zhangsan';这个过程其实是先“解析”，为对象{}添加一个值为undefined的属性name，
即obj.name-->{name: undefined}；然后进行赋值，即将'zhangsan'赋值给其name属性，最终对象obj指向{name:zhangsan}。
===========================================
按位非运算符“~”：
简单的理解，对任一数值 x 进行按位非操作的结果为 -(x + 1)
console.log('~null: ', ~null);       // => -1
console.log('~undefined: ', ~undefined);  // => -1
console.log('~0: ', ~0);          // => -1
console.log('~{}: ', ~{});         // => -1
console.log('~[]: ', ~[]);         // => -1
console.log('~(1/0): ', ~(1/0));      // => -1
console.log('~false: ', ~false);      // => -1
console.log('~true: ', ~true);       // => -2
console.log('~1.2543: ', ~1.2543);     // => -2
console.log('~4.9: ', ~4.9);       // => -5
console.log('~(-2.999): ', ~(-2.999));   // => 1

那么, ~~x就为 -(-(x+1) + 1)
console.log('~~null: ', ~~null);       // => 0
console.log('~~undefined: ', ~~undefined);  // => 0
console.log('~~0: ', ~~0);          // => 0
console.log('~~{}: ', ~~{});         // => 0
console.log('~~[]: ', ~~[]);         // => 0
console.log('~~(1/0): ', ~~(1/0));      // => 0
console.log('~~false: ', ~~false);      // => 0
console.log('~~true: ', ~~true);       // => 1
console.log('~~1.2543: ', ~~1.2543);     // => 1
console.log('~~4.9: ', ~~4.9);       // => 4
console.log('~~(-2.999): ', ~~(-2.999));   // => -2

~value的使用
判断数值中是否有某元素时，以前这样判断：

if(arr.indexOf(ele) > -1){...} //易读
现在可以这样判断，两者效率：

if(~arr.indexOf(ele)){...} //简洁
~~value的使用
对于浮点数，~~value可以代替parseInt(value)，而且前者效率更高些

parseInt(-2.99) //-2
~~(-2.99) //-2
===========================================文件上传
---------------------------FileReader
<div class="upload-picture-module box-flex f24">
	<div>
		<div class="picture-module">
			<input type="file"  @change="importFile">
			<img class="upload_img" src="" alt="">
			<input type="hidden" name="logo" class="img" data-src="" value=""/>
		</div>
	</div>
</div>
const _this = this;
const file = event.target.files[0];
if(file.size>2*1024*1024){
	_this.$message({
		showClose: true,
		message: '文件超出2M',
		duration: 3000,
		type: 'error',
		center: true
	});
	return false;
}
const exp=/\.(?:xlsx|xls)$/;
if(!file.type || file.type.indexOf('spreadsheetml')==-1 || !exp.test(file.name)){
	_this.$message({
		showClose: true,
		message: '请上传excel文件',
		duration: 3000,
		type: 'error',
		center: true
	});
	return false;
}
const reader = new FileReader();
// reader.readAsDataURL(file); //转换成base64格式
// reader.readAsText(file); //转换成字符串格式
// reader.readAsArrayBuffer(file); //转换成ArrayBuffer格式
reader.readAsBinaryString(file); //转换成原始二进制格式
reader.onload = function(e){
	// console.log(e);return;
	const _this = this;
	const url = 'http://172.16.7.71:8182/api/file/upload';
	const postData = {uploadfile: e.target.result};
	axios.defaults.timeout = 20000;
	axios.post(url,postData).
	then(function (response) {
		if(response.data.retCode==0){
			this.$message({
				message: '成功',
				type: 'success'
			});
		}else{
			_this.$message({
				showClose: true,
				message: response.data.retMsg,
				duration: 3000,
				type: 'error',
				center: true
			});
		}
	}).catch(function (error) {
		console.log(error);
	});
}
===========================================
网页可见区域宽： document.body.clientWidth
网页可见区域高： document.body.clientHeight
网页可见区域宽： document.body.offsetWidth (包括边线的宽)
网页可见区域高： document.body.offsetHeight (包括边线的高)
网页正文全文宽： document.body.scrollWidth
网页正文全文高： document.body.scrollHeight
网页被卷去的高： document.body.scrollTop
网页被卷去的左： document.body.scrollLeft
网页正文部分上： window.screenTop
网页正文部分左： window.screenLeft
屏幕物理分辨率的高： window.screen.height
屏幕物理分辨率的宽： window.screen.width
屏幕可用工作区高度： window.screen.availHeight
屏幕可用工作区宽度： window.screen.availWidth
屏幕缩放因子：window.devicePixelRatio
屏幕逻辑分辨率：window.screen.width * window.devicePixelRatio (缩放因子与物理分辨率的乘积)
===========================================