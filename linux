
=============================================tar
解压：tar -xzvf FileName.tar.gz -C /usr/local/
-C 选项的作用是：指定需要解压到的目录。
压缩：tar -czvf FileName.tar.gz DirName

-----------------------------------------文件压缩包太大，切分再合并，解压
split -d -b 20m dmdbms.tgz dmdbms.tgz_new_
cat dmdbms.tgz_new_* > dmdbms_new.tgz
tar -xzvf dmdbms_new.tgz
tar -czvf 139.tgz 139*
=============================================
man
tldr（命令手册）、tree（树形命令）、rlwrap（历史命令）、script（记录会话输出）、autojump（一键直达）
=============================================
find . -name *~HEAD*  | xargs -n 1000 rm -f
=============================================
文件操作：
文件权限：
	cd /yjdata/www/www/web/thinkphp5.1/msy
	chown -R git:git /yjdata/www/www/web/thinkphp5.1/msy/vendor
	chmod -R 664 /yjdata/www/www/web/thinkphp5.1/msy/vendor
文件备份：
	cp -pdr no-debug-non-zts-20131226  no-debug-non-zts-20131226_bak
列出 删除 属主或属组为git的文件 的语句
	ls -ltr|awk '{if($4 == "git") print "rm "$NF}'
=============================================
常用服务：  nginx | mysql | httpd | vsftpd | php-fpm
	nginx: 		service nginx 	(start|stop|restart)
	systemctl (start|stop|restart) nginx.service
在Centos 中 systemctl  是设置系统服务的命令，它融合之前service和chkconfig的功能于一体。
可以使用它永久性或只在当前会话中启用/禁用服务。
启动一个服务：systemctl start postfix.service
关闭一个服务：systemctl stop postfix.service
重启一个服务：systemctl restart postfix.service
显示一个服务的状态：	systemctl status postfix.service
在开机时启用一个服务：	systemctl enable postfix.service
在开机时禁用一个服务：	systemctl disable postfix.service
查看服务是否自启动：	systemctl is-enabled docker.service
列出系统所有服务的启动情况：	systemctl list-units --type=service
列出所有自启动服务：			systemctl list-unit-files|grep enabled
查看启动失败的服务列表：   systemctl --failed
PS：使用命令 systemctl is-enabled postfix.service 得到的值可以是enable、disable或static，这里的 static 它是指对应的 Unit 文件中没有定义[Install]区域，因此无法配置为开机启动服务。
systemctl   list-unit-files       列出所有已经安装的  服务  及  状态 
systemctl restart sshd.service		#重启sshd服务
systemctl status firewalld.service  #查看防火墙状态
systemctl stop firewalld.service	#关闭防火墙
systemctl disable firewalld.service #禁止防火墙开机启动

nginx默认监听80端口，iptables规则开放80端口
编辑配置文件：vim /etc/sysconfig/iptables
在文件中间添加iptables规则
-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT
重启防火墙：service iptables restart
或者关闭iptables规则：iptables -F && iptables -t nat -F
=============================================

=============================================
userdel，只有一个参数可选 -r ；如果加参数-r ，表示在删除用户的同时，一并把用户的家目录及本地邮件存储的目录或文件也一同删除；比如我们现在有个用户linuxso，其家目录位于/var目录中，现在我们来删除这个用户。
userdel linuxso 注：删除用户linuxso，但不删除其家目录及文件；
userdel -r linuxso 注：删除用户linuxso，其家目录及文件一并删除；

userdel -r 用户名
rm -rf /home/用户名

在linux下用useradd添加用户时,出现错误:Creating mailbox file: 文件已存在?
  怎么解决:
      原来linux下添加用户后,会在系统里自动加一个邮箱(系统邮箱),路径是:/var/spool/mail/用户名
      可以直接用命令#rm -rf /var/spool/mail/用户名
      这样就可以再次添加同一名字的用户
=============================================lib64和/usr/lib64和/usr/local/lib64的区别
简单说,/lib64是内核级的,/usr/lib64是系统级的,/usr/local/lib64是用户级的.
=============================================
RHEL以及他的衍生发行版如CentOS、Scientific Linux为了稳定，官方的rpm repository提供的rpm包往往是很滞后的，当然了，这样做这是无可厚非的，毕竟这是服务器版本，安全稳定是重点，官方的rpm repository提供的rpm包也不够丰富，很多时候需要自己编译那太辛苦了，而EPEL恰恰可以解决这两方面的问题。

yum install -y epel-release
=============================================
# 下划线转小驼峰
awk -F _ '{ # 按_拆分字符串
  if (NF >= 2) 
  {
    # 拆成两个以上的字符串，需要做处理，把第2~n个字符串开头第一个字母改成大写
    # print "yes";
    strOut = $1;
    # print "strOut = " strOut " NF " NF;
    for (i = 2; i <= NF; i++)
    {
      preStr = substr($i, 1, 1);
      endStr = substr($i, 2);
      strOut = strOut toupper(preStr) endStr;
    }
    print strOut;
  }
  else
  {
    print $0;
  }
}' tmp.txt
=============================================解决Linux使用wget命令提示无法解析主机地址的问题
解决办法：

登入root

vim /etc/resolv.conf

修改内容为下（将DNS地址改为google域名服务器）
nameserver 8.8.8.8
nameserver 8.8.4.4
service network restart
=============================================用户组
添加组：groupadd 组名
[root@Server-n93yom ~]# groupadd dev
[root@Server-n93yom ~]# cat /etc/group | grep dev
dev:x:10011:
[root@Server-n93yom ~]#
删除组：groupdel 组名
[root@Server-n93yom ~]# groupdel dev
[root@Server-n93yom ~]# cat /etc/group | grep dev
[root@Server-n93yom ~]#
查询组：cat /etc/group 或者使用管道来精确查询 cat /etc/group | grep dev
示例：
	groupadd htgx
=============================================用户
1、添加新的用户账号使用 useradd命令，其语法如下：

代码:
useradd 选项 用户名
其中各选项含义如下：

代码:
-c<备注> 　加上备注文字。备注文字会保存在passwd的备注栏位中。
-d<登入目录> 　指定用户登入时的起始目录。
-D 　变更预设值．
-e<有效期限> 　指定帐号的有效期限。
-f<缓冲天数> 　指定在密码过期后多少天即关闭该帐号。
-g<群组> 　指定用户所属的群组。
-G<群组> 　指定用户所属的附加群组。
-m 　自动建立用户的登入目录。
-M 　不要自动建立用户的登入目录。
-n 　取消建立以用户名称为名的群组．
-r 　建立系统帐号。
-s<shell>　 　指定用户登入后所使用的shell。
-u<uid> 　指定用户ID。

例1：
代码:
# useradd –d /home/htgx -m htgx
此命令创建了一个用户htgx，
其中-d和-m选项用来为登录名htgx产生一个主目录/home/htgx（/home为默认的用户主目录所在的父目录）。

例2：
代码:
# useradd -s /bin/sh -g group –G adm,root gem
此命令新建了一个用户gem，该用户的登录Shell是/bin/sh，它属于group用户组，同时又属于adm和root用户组，其中group用户组是其主组。

这里可能新建组：#groupadd group及groupadd htgx　
增加用户账号就是在/etc/passwd文件中为新用户增加一条记录，同时更新其他系统文件如/etc/shadow, /etc/group等。
Linux提供了集成的系统管理工具userconf，它可以用来对用户账号进行统一管理。

2、删除帐号

如果一个用户的账号不再使用，可以从系统中删除。删除用户账号就是要将/etc/passwd等系统文件中的该用户记录删除，必要时还删除用户的主目录。删除一个已有的用户账号使用userdel命令，其格式如下：

代码:
userdel 选项 用户名

常用的选项是-r，它的作用是把用户的主目录一起删除。
例如：

代码:
# userdel sam

此命令删除用户sam在系统文件中（主要是/etc/passwd, /etc/shadow, /etc/group等）的记录，同时删除用户的主目录。

3、修改帐号

修改用户账号就是根据实际情况更改用户的有关属性，如用户号、主目录、用户组、登录Shell等。
修改已有用户的信息使用usermod命令，其格式如下：

代码:
usermod 选项 用户名

常用的选项包括-c, -d, -m, -g, -G, -s, -u以及-o等，这些选项的意义与useradd命令中的选项一样，可以为用户指定新的资源值。另外，有些系统可以使用如下选项：

代码:
-l 新用户名

这个选项指定一个新的账号，即将原来的用户名改为新的用户名。
例如：
代码:
# usermod -s /bin/ksh -d /home/z –g developer sam
此命令将用户sam的登录Shell修改为ksh，主目录改为/home/z，用户组改为developer。

4、用户口令的管理

用户管理的一项重要内容是用户口令的管理。用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，即使是指定空口令。
指定和修改用户口令的Shell命令是passwd。超级用户可以为自己和其他用户指定口令，普通用户只能用它修改自己的口令。命令的格式为：
代码:

passwd 选项 用户名
可使用的选项：

代码:
-l 锁定口令，即禁用账号。
-u 口令解锁。
-d 使账号无口令。
-f 强迫用户下次登录时修改口令。
如果默认用户名，则修改当前用户的口令。

例如，假设当前用户是sam，则下面的命令修改该用户自己的口令：

代码:
$ passwd
Old password:******
New password:*******
Re-enter new password:*******

如果是超级用户，可以用下列形式指定任何用户的口令：

代码:
# passwd sam
New password:*******
Re-enter new password:*******

普通用户修改自己的口令时，passwd命令会先询问原口令，验证后再要求用户输入两遍新口令，如果两次输入的口令一致，则将这个口令指定给用户；而超级用户为用户指定口令时，就不需要知道原口令。

为了系统安全起见，用户应该选择比较复杂的口令，例如最好使用8位长的口令，口令中包含有大写、小写字母和数字，并且应该与姓名、生日等不相同。

为用户指定空口令时，执行下列形式的命令：

代码:
# passwd -d sam

此命令将用户sam的口令删除，这样用户sam下一次登录时，系统就不再询问口令。

passwd命令还可以用-l(lock)选项锁定某一用户，使其不能登录，例如：

代码:
# passwd -l sam
  新建用户异常：
useradd -d /usr/hadoop -u 586 -m hadoop -g hadoop
 1  Creating mailbox file: 文件已存在  
    删除即可 rm -rf /var/spool/mail/用户名
2 useradd: invalid numeric argument 'hadoop'
   这是由于hadoop组不存在 请先建hadoop组
通过cat /etc/passwd 可以查看用户的pass
cat /etc/shadow 可以查看用户名
cat /etc/group  可以查看 组

示例：
	useradd -m -g htgx htgx
	passwd htgx huitone2214
=============================================权限
让普通用户拥有root的权限
1.root登录

2.adduser 用户名

3.passwd 用户名

  确定密码

4.修改/etc/passwd即可，把用户名的ID和ID组修改成0。
=============================================su 与 su - 区别
su命令和su -命令最大的本质区别就是:前者只是切换了root身份,但Shell环境仍然是普通用户的Shell;而后者连用户和Shell环境一起切换成root身份了。只有切换了Shell环境才不会出现PATH环境变量错误。
=============================================linux给用户添加sudo权限
有时候我们只需要执行一条root权限的命令也要su到root，是不是有些不方便？这时可以用sudo代替。默认新建的用户不在sudo组，需要编辑/etc/sudoers文件将用户加入，该文件只能使用visudo命令，

1) 首先需要切换到root, su - (注意有- ，这和su是不同的，在用命令"su"的时候只是切换到root，但没有把root的环境变量传过去，还是当前用乎的环境变量，用"su -"命令将环境变量也一起带过去，就象和root登录一样)

2) 然后visudo 或者 vi /etc/sudoers, visudo 这个和vi的用法一样

找到一行root ALL=(ALL)   ALL，进入append模式，输入

htgx ALL=(ALL)   ALL

然后按Esc，再输入:w保存文件，再:q退出

这样就把自己加入了sudo组，可以使用sudo命令了。

3) 默认5分钟后刚才输入的sodo密码过期，下次sudo需要重新输入密码，如果觉得在sudo的时候输入密码麻烦，把刚才的输入换成如下内容即可：

htgx ALL=(ALL) NOPASSWD: ALL

至于安全问题，对于一般个人用户，我觉得这样也可以的。

4）如果你想设置只有某些命令可以sudo的话，

htgx   ALL= (root) NOPASSWD: /sbin/mount, (root) NOPASSWD: /bin/umount, (root) NOPASSWD: /mnt/mount, (root) NOPASSWD: /bin/rm, (root) NOPASSWD: /usr/bin/make, (root) NOPASSWD: /bin/ln, (root) NOPASSWD: /bin/sh, (root) NOPASSWD: /bin/mv, (root) NOPASSWD: /bin/chown, (root) NOPASSWD: /bin/chgrp, (root) NOPASSWD: /bin/cp, (root) NOPASSWD: /bin/chmod
=============================================

=============================================

=============================================

=============================================

=============================================

=============================================

=============================================