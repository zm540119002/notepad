=============================================
ssh_config和sshd_config
	都是ssh服务器的配置文件，二者区别在于，前者是针对客户端的配置文件，后者则是针对服务端的配置文件。
	两个配置文件都允许你通过设置不同的选项来改变客户端程序的运行方式。
cd /usr/local/ssh/
vim /usr/local/ssh/ssh_config
service sshd restart
=============================================案例
cd ~/.ssh
ssh-keygen -t rsa
vim id_rsa.pub 复制内容上传到gitlab用户的key里
git clone git@172.16.7.54:php/inc_chk.git
git clone ssh://git@127.0.0.1:1212/php/inc_chk.git
=============================================
禁止/允许ip访问linux 的ssh功能
vim /etc/hosts.deny
vim /etc/hosts.allow
sshd:ip
sshd:all
service sshd restart
=============================================

=============================================
ssh 登录免密码：

1、登录A机器 
2、ssh-keygen -t [rsa|dsa]，将会（在当前用户目录下）生成公钥文件（id_rsa.pub）和私钥文件 （id_rsa）
3、将 .pub 文件复制到B机器的 .ssh 目录， 并 ssh-copy-id -i ~/.ssh/id_rsa.pub  git@meishangyun.com （如果服务器git用户主目录下没有.ssh/authorized_keys 文件的话手动建立）
4、大功告成，从A机器登录B机器的目标账户，不再需要密码了；
如果希望ssh公钥生效需满足至少下面两个条件：/home/git下
1) .ssh目录的权限必须是700
2) .ssh/authorized_keys文件权限必须是600

git:
一、在Git Bash内执行cd ~/.ssh命令，如果存在该目录，表明之前生成果SSH Key，利用ll命令即可以查看。
二、生成新的SSH Key，输入ssh-keygen -t rsa -C "540119002@qq.com"命令，其中"540119002@qq.com"是GitHub账号。
三、在~/.ssh目录下有 id_rsa和 id_rsa.pub两个文件，其中id_rsa.pub文件里存放的即是公钥key。
五、测试是否配置成功ssh -T git@github.com，如图即为配置成功。
//清除服务器公匙
ssh-keygen -R 47.106.79.38
ssh-keygen -t rsa
ssh-copy-id -i ~/.ssh/id_rsa.pub git@120.79.201.125	//美尚
ssh-copy-id -i ~/.ssh/id_rsa.pub git@47.106.79.38	//维雅
ssh-copy-id -i ~/.ssh/id_rsa.pub git@127.0.0.1		//本地
git config --global credential.helper store
git config --global user.name = 'zm'
git config --global user.email = 'zm@qq.com'
--------------------------------------------------------------------------
本地配置多个ssh key
大多数时候，我们的机器上会有很多的git host,比如公司gitlab、github、oschina等，那我们就需要在本地配置多个ssh key，使得不同的host能使用不同的ssh key ,做法如下（以公司gitlab和github为例）：

为公司生成一对秘钥ssh key

ssh-keygen -t rsa -C 'common@huitone.com' -f ~/.ssh/gitlab-rsa
为github生成一对秘钥ssh key

ssh-keygen -t rsa -C 'yourEmail2@xx.com' -f ~/.ssh/github-rsa
在~/.ssh目录下新建名称为config的文件（无后缀名）。用于配置多个不同的host使用不同的ssh key，内容如下：

# gitlab
Host gitlab.com
    HostName gitlab.com
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/gitlab_id-rsa
# github
Host github.com
    HostName github.com
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/github_id-rsa
  ​
# 配置文件参数
# Host : Host可以看作是一个你要识别的模式，对识别的模式，进行配置对应的的主机名和ssh文件
# HostName : 要登录主机的主机名
# User : 登录名
# IdentityFile : 指明上面User对应的identityFile路径
按照上面的步骤分别往gitlab和github上添加生成的公钥gitlab_id-rsa.pub和github_id-rsa.pub
OK，大功告成，再次执行git命令验证是不是已经不需要再次验证权限了。

再次查看~/..ssh目录下的文件,会有gitlab_id-rsa、gitlab_id-rsa.pub和github_id-rsa、github_id-rsa.pub四个文件
=============================================