
git config --global user.email "139.159.147.153@example.com"
git config --global user.name "139.159.147.153"
================================================
git clone git@172.16.7.54:php/inc_chk_new.git inc_chk
================================================
git commit -am 'zm' && git pull origin hch && git push origin hch
git commit -am 'zm' && git pull origin master && git push origin master
================================================常用
git log
git show d21522728254aee1ab083e
--------------------------------------------------
commit be97b85a0ecbcd34d7dd0da2cd07f8b05e0c8396 (HEAD -> master, origin/master, origin/HEAD)
Author: zm <zm@qq.com>
Date:   Tue Jun 30 14:50:51 2020 +0800

git log --before="2019-11-25 23:59:59" --after="2018-05-21 00:00:00" 
git log --since ="2018-07-19 00:00:00" --until=="2018-07-19 23:00:00"
git reflog
git reset --hard ca61405d0c69a86b9888978cd16fdec068ef9bfd
git reset --hard be97b85a0ecbcd34d7dd0da2cd07f8b05e0c8396
git push -f origin master
git push -u origin 5.2
11/1版本：	52f0d4e1
修改全局布局		64ea0475d8dd65fe713620dbf088e789d1877520
流程配置界面重构  	cc40c758270751d3a0fcbc09df4f8d7e91d4cc6a

 5f4b3eb152af9b9a964f59939d
 ================================================分支
1.查看一下本地分支
    git branch;
    查看本地和远程的所有分支
    git branch -a
2.新建一个本地的分支
    git branch -b newbranch   //这个命令是新建一个分支，并切换到该分支上去
    （git branch newbranch;     git checkout newbranch）这两个命令合起来等同于上面的一个命令
3.新建一个远程分支（同名字的远程分支）
    git push origin newbranch:newbranch   //创建了一个远程分支名字叫 newbranch
4.把本地的新分支，和远程的新分支关联
    git push --set-upstream origin newbranch
这时就可以在这个分支下使用 git pull 推送支远程的新分支上了

示例：
本地：
	git checkout -b dm8
	git push origin dm8:dm8
其他git：
	git checout -b dm8
----------------------------------从其他分支checkout文件到当前分支
示例：当前分支：hch
git checkout origin/master new_index/service_report.php
git commit . -m 'zm' && git pull origin hch && git push origin hch
-------------------------------------------------注意
git checkout -b newbranch	//从本地拉取代码创建新的分支，并切换到新的分支
git checkout -b newbranch origin/newbranch //从远程拉取代码创建新的分支，并切换到新的分支
-------------------------------------------------删除本地并删除相应远程分支示例
git branch -D dm8
git push origin --delete dm8
=================================================git 大文件提交
 git lfs install
 git lfs track "*.rar *.txt"
=================================================
裸库部署：
部署例子：服务器域名：	www.worldview.com.cn
服务器：	
	cd /home
	git init --bare web.git
	chown -R git:nginx web.git
	chmod -R 775 web.git
客户端：	
	git clone  git@120.79.201.125:/home/web.git msy
	输入git密码		git;;2018
	ssh-copy-id -i id_rsa.pub  ssh://git@47.106.79.38:65123
	git clone ssh://git@47.106.79.38:65123/home/web.git weiya
	输入git密码		W_y_+g+2018-10-16
	git clone git@172.16.7.74:/home/web.git inc_chk
	git clone https://github.com/zm540119002/msy.git	|	https://github.com/zm540119002/msy
=================================================git remote
git remote set-url origin ssh://git@127.0.0.1:9898/php/inc_chk.git
=================================================git rm
忽略已跟踪的文件
git update-index --assume-unchanged  msy/Application/Admin/Conf/menu_conf.php
git update-index --assume-unchanged js/My97DatePicker/
撤销-忽略已跟踪的文件：
git update-index --no-assume-unchanged  msy/Application/Admin/Conf/menu_conf.php
git update-index --no-assume-unchanged js/My97DatePicker/
删除已追踪的文件夹或文件夹:
1 git rm -r --cached .idea/	#保留本地
2 git rm -r .idea/	#不保留本地
3 git commit -m 'x'
4 git push ...

规则很简单，不做过多解释，但是有时候在项目开发过程中，突然心血来潮想把某些目录或文件加入忽略规则，按照上述方法定义后发现并未生效，
原因是.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交：
git rm -r --cached .
git add .
git commit -m 'update .gitignore'

http://blog.csdn.net/fuchaosz/article/details/52170105
=================================================.gitignore
空行或是以#开头的行即注释行将被忽略；
以斜杠 “/” 结尾表示目录；
以星号 “*” 通配多个字符；
以问号 “?” 通配单个字符；
以方括号 “[]” 包含单个字符的匹配列表；
以叹号 “!” 表示不忽略(跟踪)匹配到的文件或目录；
可以在前面添加斜杠 “/” 来避免递归,下面的例子中可以很明白的看出来与下一条的区别。

示例：

# 忽略 .a 文件
*.a

# 但否定忽略 lib.a, 尽管已经在前面忽略了 .a 文件
!lib.a

# 仅在当前目录下忽略 TODO 文件， 但不包括子目录下的 subdir/TODO
/TODO

# 忽略 build/ 文件夹下的所有文件
build/

# 忽略 doc/notes.txt, 不包括 doc/server/arch.txt
doc/*.txt

# 忽略所有的 .pdf 文件 在 doc/ directory 下的
doc/**/*.pdf
=================================================
自动推送（hooks）设置：
裸库下的hooks目录，例如：/home/web.git/hooks
vim post-receive
输入：
#!/bin/bash
git --work-tree=/yjdata/www/www/web checkout -f
保存退出
chmod u+x post-receive
chown git:nginx post-receive
=================================================小结：
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，
用命令git checkout -- file | * （注：先从缓存区中拉取版本还原，如果没有再到版本库中拉取还原）
例如： git chekcout .
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。（git reset --hard 文件或者版本ID）

git reset --hard 的误操作的解决办法
git reflog
git reset --hard 版本

场景4：自己的远程分支版本回退的方法

如果你的错误提交已经推送到自己的远程分支了，那么就需要回滚远程分支了。 
首先要回退本地分支：

git reflog
git reset --hard b83c5031

紧接着强制推送到远程分支：
git push -f

注意：本地分支回滚后，版本将落后远程分支，必须使用强制推送覆盖远程分支，否则无法推送到远程分支
=================================================
# 添加指定文件到暂存区
$ git add [file1] [file2] ...

# 添加指定目录到暂存区，包括子目录
$ git add [dir]

# 添加当前目录的所有文件到暂存区
$ git add .

# 添加每个变化前，都会要求确认
# 对于同一个文件的多处变化，可以实现分次提交
$ git add -p

# 删除工作区文件，并且将这次删除放入暂存区
$ git rm [file1] [file2] ...

# 停止追踪指定文件，但该文件会保留在工作区
$ git rm --cached [file]

# 改名文件，并且将这个改名放入暂存区
$ git mv [file-original] [file-renamed]
四、代码提交

# 提交暂存区到仓库区
$ git commit -m [message]

# 提交暂存区的指定文件到仓库区
$ git commit [file1] [file2] ... -m [message]

# 提交工作区自上次commit之后的变化，直接到仓库区
$ git commit -a

# 提交时显示所有diff信息
$ git commit -v

# 使用一次新的commit，替代上一次提交
# 如果代码没有任何新变化，则用来改写上一次commit的提交信息
$ git commit --amend -m [message]

# 重做上一次commit，并包括指定文件的新变化
$ git commit --amend [file1] [file2] ...
五、分支

# 列出所有本地分支
$ git branch

# 列出所有远程分支
$ git branch -r

# 列出所有本地分支和远程分支
$ git branch -a

# 新建一个分支，但依然停留在当前分支
$ git branch [branch-name]

# 新建一个分支，并切换到该分支
$ git checkout -b [branch]

# 新建一个分支，指向指定commit
$ git branch [branch] [commit]

# 新建一个分支，与指定的远程分支建立追踪关系
$ git branch --track [branch] [remote-branch]

# 切换到指定分支，并更新工作区
$ git checkout [branch-name]

# 切换到上一个分支
$ git checkout -

# 建立追踪关系，在现有分支与指定的远程分支之间
$ git branch --set-upstream [branch] [remote-branch]

# 合并指定分支到当前分支
$ git merge [branch]

# 选择一个commit，合并进当前分支
$ git cherry-pick [commit]

# 删除分支
$ git branch -d [branch-name]

# 删除远程分支
$ git push origin --delete [branch-name]
$ git branch -dr [remote/branch]	例如：git branch -dr origin/zm

# 恢复暂存区的指定文件到工作区
$ git checkout [file]

# 恢复某个commit的指定文件到暂存区和工作区
$ git checkout [commit] [file]

# 恢复暂存区的所有文件到工作区
$ git checkout .

# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变
$ git reset [file]

# 重置暂存区与工作区，与上一次commit保持一致
$ git reset --hard

# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变
$ git reset [commit]

# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致
$ git reset --hard [commit]

# 重置当前HEAD为指定commit，但保持暂存区和工作区不变
$ git reset --keep [commit]

# 新建一个commit，用来撤销指定commit
# 后者的所有变化都将被前者抵消，并且应用到当前分支
$ git revert [commit]

# 暂时将未提交的变化移除，稍后再移入
$ git stash
$ git stash pop
=================================================
常见问题：
一、解决git push/git clone代码速度太慢:
1.使用管理员权限打开hosts文件
sudo vim /etc/hosts
2.在该文件末尾空一行填入
151.101.72.249 github.global.ssl.fastly.net
修改之后速度由10k20k左右增到500k-1000k左右
-------------------------------------------------------------------------------------------------------
二、检出大项目报错,curl的postBuffer默认值太小:
如果项目比较复杂庞大，检出会出现这个错误，就是因为curl的postBuffer默认值太小的原因，重新在终端配置一下这个值就可以:
git config --global http.postBuffer 1048576000 (这个值是kb 1G,根据具体项目大小修改)
--global配置对当前用户生效，如果需要对所有用户生效，则用--system
然后检查一下是否配置成功:
git config --list
=================================================